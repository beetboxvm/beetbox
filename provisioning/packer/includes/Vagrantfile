# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.require_version '>= 1.8.0'

# Find the Vagrant ID if supplied.
id = nil
ARGV.each do |arg|
  id = arg[/\h{7}/] ? arg : id
end

# Determine the current working directory and vagrantfile.
cwd = nil
vagrantfile = ENV['VAGRANT_VAGRANTFILE'] || 'Vagrantfile'
if id != nil
  require 'json'
  vagrant_home = ENV['VAGRANT_HOME'] || "#{Dir.home}/.vagrant.d"
  JSON.parse(File.read("#{vagrant_home}/data/machine-index/index"))['machines'].each do |hash, data|
    if hash[0..6] == id
      cwd = data['vagrantfile_path']
      vagrantfile = data['vagrantfile_name'] != nil ? data['vagrantfile_name'] : vagrantfile
      break
    end
  end
else
  paths = Dir.pwd.split('/')
  while cwd == nil && !paths.empty?
    dir = paths.join('/')
    current = paths.pop
    if File.exists?("#{dir}/#{vagrantfile}")
      cwd = dir
    end
  end
end

# Ensure project Vagrantfile hasn't been customized.
# @TODO - Add secondary check that parses the Vagrantfile if the MD5 is changed.
if cwd != nil && Digest::MD5.file("#{cwd}/#{vagrantfile}").hexdigest == "ef550c44b71ef09513fe24c4b564c8a9"
  config_dir = '.beetbox/'
  project_config = "#{cwd}/#{config_dir}config.yml"
  local_config = "#{cwd}/#{config_dir}local.config.yml"

  # Default vagrant config.
  vconfig = {
    'vagrant_ip' => '0.0.0.0',
    'vagrant_memory' => 1024,
    'vagrant_cpus' => 2,
    'beet_home' => '/beetbox',
    'beet_base' => '/var/beetbox',
    'beet_domain' => cwd.split('/').last.gsub(/[\._]/, '-') + ".local"
  }

  if !File.exist?(project_config)
    # Create default config file.
    require 'fileutils'
    FileUtils::mkdir_p config_dir
    File.open(project_config, "w+") {|f| f.write("---\nbeet_domain: #{vconfig['beet_domain']}\n") }
  end

  require 'yaml'
  pconfig = YAML::load_file(project_config) || nil
  vconfig = vconfig.merge pconfig if !pconfig.nil?

  # Merge local.config.yml
  if File.exist?(local_config)
    lconfig = YAML::load_file(local_config) || nil
    vconfig = vconfig.merge lconfig if !lconfig.nil?
  end

  # Replace variables in YAML config.
  vconfig.each do |key, value|
    while vconfig[key].is_a?(String) && vconfig[key].match(/{{ .* }}/)
      vconfig[key] = vconfig[key].gsub(/{{ (.*?) }}/) { |match| match = vconfig[$1] }
    end
  end

  hostname = vconfig['beet_domain']

  Vagrant.configure("2") do |config|

    # Check for plugins and attempt to install if not (Windows only).
    if vconfig['vagrant_ip'] == "0.0.0.0" && Vagrant::Util::Platform.windows?
      # Check for plugins and attempt to install if not.
      %x(vagrant plugin install vagrant-hostsupdater) unless Vagrant.has_plugin?('vagrant-hostsupdater')
      %x(vagrant plugin install vagrant-auto_network) unless Vagrant.has_plugin?('vagrant-auto_network')
      raise 'Your config requires hostsupdater plugin.' unless Vagrant.has_plugin?('vagrant-hostsupdater')
      raise 'Your config requires auto_network plugin.' unless Vagrant.has_plugin?('vagrant-auto_network')
    end

    config.vm.box = "beet/box"
    config.vm.box_version = ">= 0.2.0"
    config.vm.hostname = hostname
    config.ssh.insert_key = false
    config.ssh.forward_agent = true

    # Network config.
    if vconfig['vagrant_ip'] == "0.0.0.0" && Vagrant::Util::Platform.windows?
      config.vm.network :private_network, :ip => "0.0.0.0", :auto_network => true
    elsif vconfig['vagrant_ip'] == "0.0.0.0"
      config.vm.network :private_network, :type => "dhcp"
    else
      config.vm.network :private_network, ip: vconfig['vagrant_ip']
    end

    # Synced folders.
    config.vm.synced_folder ".", vconfig['beet_base'],
      type: "nfs",
      id: "beetbox"

    if vconfig['beet_debug']
      config.vm.synced_folder "./provisioning", "#{vconfig['beet_home']}/provisioning",
        type: "nfs",
        id: "debug"
      debug_mode = "BEETBOX_DEBUG=true"
    end

    # Upload vagrant.config.yml
    config.vm.provision "project_config", type: "file" do |s|
     s.source = project_config
     s.destination = "~/vagrant.config.yml"
    end

    # Upload local.config.yml
    if File.exist?(local_config)
      config.vm.provision "local_config", type: "file" do |s|
       s.source = local_config
       s.destination = "~/local.config.yml"
      end
    end

    # Provision box
    beet_sh = "#{vconfig['beet_home']}/provisioning/beetbox.sh"
    config.vm.provision "ansible", type: "shell" do |s|
      s.privileged = false
      s.inline = "sudo chmod +x #{beet_sh} && #{debug_mode} sudo -H #{beet_sh}"
    end

    # VirtualBox.
    config.vm.provider :virtualbox do |v|
      v.name = "#{config.vm.hostname}.#{Time.now.to_i}"
      v.memory = vconfig['vagrant_memory']
      v.cpus = vconfig['vagrant_cpus']
      v.linked_clone = true
      v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
      v.customize ["modifyvm", :id, "--ioapic", "on"]
    end
  end

  # Create local drush alias.
  if File.directory?("#{Dir.home}/.drush")
    alias_file = "#{Dir.home}/.drush/" + hostname + ".aliases.drushrc.php"
    if ARGV[0] == "destroy"
      File.delete(alias_file) if File.exist?(alias_file)
    else
      require 'erb'
      class DrushAlias
        attr_accessor :hostname, :uri, :key, :root
        def template_binding
          binding
        end
      end

      template_file = File.dirname(File.expand_path(__FILE__)) + '/drush.alias.erb'
      template = File.read(template_file)

      alias_file = File.open(alias_file, "w+")
      da = DrushAlias.new
      da.hostname = hostname
      da.uri = hostname
      da.key = "#{Dir.home}/.vagrant.d/insecure_private_key"
      da.root = vconfig['beet_web'] ||= vconfig['beet_root'] ||= vconfig['beet_base']
      alias_file << ERB.new(template).result(da.template_binding)
      alias_file.close
    end
  end
end

# Load local Vagrantfile, if exists.
include_vagrantfile = "#{cwd}/Vagrantfile.local"
load include_vagrantfile if File.exist?(include_vagrantfile)
