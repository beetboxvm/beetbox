---
- hosts: localhost
  connection: local
  become: yes

  vars:
    beet_base: "{{ lookup('env','BEET_BASE') | default('/var/beetbox',true) }}"
    beet_user: "{{ lookup('env','BEET_USER') | default('vagrant',true) }}"
    beet_profile: "{{ lookup('env','BEET_PROFILE') | default('beetbox',true) }}"
    ansible_home: "{{ lookup('env','ANSIBLE_HOME') | default('/beetbox/provisioning/ansible',true) }}"
    conf_dir: "{{ beet_base }}/.beetbox"
    conf_files:
      - default.config.yml
      - "profiles/{{ beet_profile }}.config.yml"
      - project.config.yml
      - host.config.yml
      - config.yml
      - local.config.yml

  tasks:

    - name: Check if config files exists
      stat: "path={{ conf_dir }}/{{ item }}"
      with_items: "{{ conf_files }}"
      register: available_conf

    - name: Copy config files from config directory.
      copy:
        src: "{{ conf_dir }}/{{ item.item }}"
        dest: "{{ ansible_home }}/config/{{ item.item }}"
        force: yes
      when: item.stat.exists
      with_items: "{{ available_conf.results }}"
      changed_when: false

    - name: Create absent config files.
      file:
        path: "{{ ansible_home }}/config/{{ item }}"
        state: touch
      with_items: "{{ conf_files }}"
      changed_when: false

    - name: Check if playbook override directory exists
      stat: "path={{ conf_dir }}/playbooks"
      register: project_plays

    - name: Copy playbook overrides from config directory.
      copy:
        src: "{{ conf_dir }}/playbooks/"
        dest: "{{ ansible_home }}"
        force: yes
      when: project_plays.stat.exists
      changed_when: false

    - name: Check if project roles directory exists
      stat: "path={{ conf_dir }}/roles"
      register: project_roles

    - name: Copy project roles from config directory.
      copy:
        src: "{{ conf_dir }}/roles/"
        dest: "{{ ansible_home }}/roles"
        force: yes
      when: project_roles.stat.exists
      changed_when: false

    - name: "Ensure {{ beet_user }} has ownership of {{ ansible_home }}."
      file:
        path: "{{ ansible_home }}"
        owner: "{{ beet_user }}"
        group: "{{ beet_user }}"
        state: directory
        force: yes
      failed_when: false
